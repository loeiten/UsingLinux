Some tutorials:
===============
http://readwrite.com/2013/09/30/understanding-github-a-journey-for-beginners-part-1#awesm=~oFlQCvoJank0tf
http://readwrite.com/2013/10/02/github-for-beginners-part-2#awesm=~oFlUvD0lcooGkC



To not have to type the username and pw all the time:
=====================================================
NOTE: You have to change the URL from HTTP to SSH when making an SSH key
https://help.github.com/articles/generating-ssh-keys/
https://help.github.com/articles/changing-a-remote-s-url/



Daily use
=========
git add readme.txt
git commit -m “Add readme.txt”
git push -u origin master
# Add all changed files
git add -u



gitdiff
=======
NOTE: Use 
git d 
instead if
gitdiff
http://stackoverflow.com/questions/3713765/viewing-all-git-diffs-with-vimdiff



List all the files for a commit in Git
======================================
Get the checksum for git log
Either:
git diff-tree --no-commit-id --name-only -r 94dce78b10d568b32981642d7d0b36abe2267988
or
git show --pretty="format:" --name-only 94dce78b10d568b32981642d7d0b36abe2267988
http://stackoverflow.com/questions/424071/list-all-the-files-for-a-commit-in-git



Revert to a previous Git commit
===============================
# This will destroy any local modifications.
# Don't do it if you have uncommitted work you want to keep.
git reset --hard 299fe62b218f82712554f7df3b62f6045f0a2d88
http://stackoverflow.com/questions/4114095/revert-to-a-previous-git-commit



Create folder at github
=======================
git remote add origin https://github.com/uname/folder.git



Revert all changes
==================
http://stackoverflow.com/questions/1146973/how-do-i-revert-all-local-changes-in-git-managed-project-to-previous-state
# Remove all untracked files
git clean -f 
# Revert changes made to your working copy
git checkout .
# Revert changes made to the index (i.e., that you have added)
git reset
# Revert a change that you have committed
git revert ...



How git works
=============
http://stackoverflow.com/questions/2745076/what-are-the-differences-between-git-commit-and-git-push



Branches and merging
====================
# Clone a branch
#http://stackoverflow.com/questions/1911109/git-clone-a-specific-branch
git clone -b <branch> <remote_repo>
# Brances and merging
# http://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
# Make branch
git checkout -b [name_of_your_new_branch]
# Push branch
git push origin [name_of_your_new_branch]
# See branches
git log --graph --oneline --all
# Delete a branch
git push origin --delete <branchName>



Add a delete
============
git rm $(git ls-files --deleted)



Resolve a confilct
==================
https://help.github.com/articles/resolving-a-merge-conflict-from-the-command-line/



Git on USB
==========
mkdir /path/to/usb/repository.git
cd /path/to/usb/repository.git
git init --bare
cd /path/to/source/
git init
git remote add usb file:///path/to/usb/repository.git
git push usb

To pull:
git pull usb
If there are stuff already in the folder:
git fetch --all
git reset --hard usb/master


http://www.geppyparziale.com/post/13494900906/create-a-git-repository-on-a-usb-drive
